import React, { useEffect, useMemo, useRef, useState } from 'react';
import { TreeNode } from '@/utils/buildTree';
import { TreeViewItem } from './TreeViewItem';
import { Button } from './ui/button';
import { Upload } from 'lucide-react';
import { toast } from '@/hooks/use-toast';
import {
  Dialog, DialogContent, DialogDescription, DialogFooter,
  DialogHeader, DialogTitle,
} from './ui/dialog';
import { Input } from './ui/input';
import { Label } from './ui/label';

interface EnhancedFolderTreeProps {
  data: TreeNode[];
  selectedId: string | null;
  onSelect: (id: string) => void;
  onFileUpload?: (files: File[], folderId?: string) => void;
  onAction: (action: string, nodeId: string, data?: any)
    => void | Promise<boolean | { ok?: boolean; message?: string }>;

  /** üîπ –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ (–Ω–µ–æ–±—è–∑.) */
  expandedIds?: string[];
  onToggleExpanded?: (ids: string[]) => void;

  /** üîπ –ö–ª—é—á –¥–ª—è localStorage (–Ω–∞–ø—Ä–∏–º–µ—Ä, `expanded:${projectRootId}`) */
  persistKey?: string;
}

/** –ù–∞–π—Ç–∏ –ø—É—Ç—å –æ—Ç –∫–æ—Ä–Ω—è –¥–æ —É–∑–ª–∞ (—Å–ø–∏—Å–æ–∫ id) */
function findPath(nodes: TreeNode[], targetId: string): string[] | null {
  const stack: { node: TreeNode; path: string[] }[] = nodes.map(n => ({ node: n, path: [n.id] }));
  while (stack.length) {
    const { node, path } = stack.pop()!;
    if (node.id === targetId) return path;
    (node.children ?? []).forEach(ch => stack.push({ node: ch, path: [...path, ch.id] }));
  }
  return null;
}

export const EnhancedFolderTree: React.FC<EnhancedFolderTreeProps> = ({
  data,
  selectedId,
  onSelect,
  onFileUpload,
  onAction,
  expandedIds,
  onToggleExpanded,
  persistKey,
}) => {
  /** ====== —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–æ—Ä–Ω—è –ø–æ ¬´—á–∏—Å–ª–∞ —Å–Ω–∞—á–∞–ª–∞¬ª ====== */
  const collator = useMemo(
    () => new Intl.Collator(undefined, { numeric: true, sensitivity: 'base' }),
    []
  );
  const startsWithDigit = (s: string) => /^\s*\d/.test(s || '');
  const compareNodes = React.useCallback((a: TreeNode, b: TreeNode) => {
    const aNum = startsWithDigit(a.name);
    const bNum = startsWithDigit(b.name);
    if (aNum !== bNum) return aNum ? -1 : 1;
    return collator.compare(a.name || '', b.name || '');
  }, [collator]);
  const sortedRoot = useMemo(() => data.slice().sort(compareNodes), [data, compareNodes]);

  /** ====== —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ: controlled / uncontrolled ====== */
  const isControlled = Array.isArray(expandedIds) && typeof onToggleExpanded === 'function';
  const [uncontrolled, setUncontrolled] = useState<string[]>([]);
  const expandedSet = useMemo(
    () => new Set(isControlled ? expandedIds! : uncontrolled),
    [isControlled, expandedIds, uncontrolled]
  );

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: —á–∏—Ç–∞–µ–º –∏–∑ localStorage –æ–¥–∏–Ω —Ä–∞–∑
  const didInitRef = useRef(false);
  useEffect(() => {
    if (isControlled || didInitRef.current) return;
    didInitRef.current = true;
    if (persistKey) {
      try {
        const saved = JSON.parse(localStorage.getItem(persistKey) || '[]');
        if (Array.isArray(saved)) setUncontrolled(saved);
      } catch {}
    } else {
      // –ø–æ –¥–µ—Ñ–æ–ª—Ç—É —á—É—Ç—å-—á—É—Ç—å UX: —Ä–∞—Å–∫—Ä—ã—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ—Ä–Ω–µ–≤—ã–µ, –±–µ–∑ –Ω–∞–≤—è–∑—á–∏–≤–æ–≥–æ ¬´expand all¬ª
      setUncontrolled(sortedRoot.map(n => n.id));
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∞–ø–¥–µ–π—Ç–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è uncontrolled)
  useEffect(() => {
    if (!isControlled && persistKey) {
      localStorage.setItem(persistKey, JSON.stringify(uncontrolled));
    }
  }, [isControlled, persistKey, uncontrolled]);

  // –ï—Å–ª–∏ –º–µ–Ω—è–µ—Ç—Å—è selectedId ‚Äî —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º ¬´–ø—É—Ç—å –¥–æ —É–∑–ª–∞¬ª, —á—Ç–æ–±—ã —É–∑–µ–ª –±—ã–ª –≤–∏–¥–∏–º
  useEffect(() => {
    if (!selectedId) return;
    const path = findPath(sortedRoot, selectedId);
    if (!path || path.length <= 1) return;

    const ensureExpanded = (ids: string[]) => {
      const next = new Set(ids);
      // —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–∫–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ ‚Äî —ç—Ç–æ —Å–∞–º —É–∑–µ–ª)
      path.slice(0, -1).forEach(id => next.add(id));
      return Array.from(next);
    };

    if (isControlled) {
      onToggleExpanded!(ensureExpanded(expandedIds || []));
    } else {
      setUncontrolled(prev => ensureExpanded(prev));
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [selectedId, sortedRoot]);

  // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–±–æ—Ä–∞ —É–∑–ª–æ–≤ –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ: —á–∏—Å—Ç–∏–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ id
  useEffect(() => {
    const allIds = new Set<string>();
    const walk = (nodes: TreeNode[]) => nodes.forEach(n => {
      allIds.add(n.id);
      (n.children ?? []).length && walk(n.children!);
    });
    walk(sortedRoot);

    const reconcile = (ids: string[]) => ids.filter(id => allIds.has(id));

    if (isControlled) {
      // –í controlled —Ä–µ–∂–∏–º–µ –Ω–∏—á–µ–≥–æ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º ‚Äî —Ä–æ–¥–∏—Ç–µ–ª—å —Ä–µ—à–∞–µ—Ç
    } else {
      setUncontrolled(prev => reconcile(prev));
    }
  }, [sortedRoot, isControlled]);

  const setExpanded = (updater: (curr: string[]) => string[]) => {
    if (isControlled) {
      onToggleExpanded!(updater(expandedIds || []));
    } else {
      setUncontrolled(updater);
    }
  };

  const toggleNode = (id: string) => {
    setExpanded(curr => {
      const set = new Set(curr);
      set.has(id) ? set.delete(id) : set.add(id);
      return Array.from(set);
    });
  };

  /** ====== –¥–µ–π—Å—Ç–≤–∏—è ====== */
  const handleItemAction = (action: string, nodeId: string, data?: any) => {
    if (!onAction) {
      toast({ title: '–ù–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ', description: `–î–µ–π—Å—Ç–≤–∏–µ "${action}" –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ` });
      return;
    }
    return onAction(action, nodeId, data);
  };

  /** ====== –∑–∞–≥—Ä—É–∑–∫–∞ –≤ –∫–æ—Ä–µ–Ω—å (—Ñ–∞–π–ª—ã/–ø–∞–ø–∫–∞) ====== */
  const spawnInput = (folderMode: boolean, onFiles: (files: File[]) => void) => {
    const input = document.createElement('input');
    input.type = 'file';
    input.multiple = true;
    if (folderMode) {
      (input as any).webkitdirectory = true;
      (input as any).directory = true;
    }
    input.addEventListener('change', (e) => {
      const target = e.target as HTMLInputElement;
      const list = Array.from(target.files ?? []);
      if (list.length === 0) return;
      const prepared = list.map(f => {
        (f as any).relativePath = (f as any).webkitRelativePath || f.name;
        return f;
      });
      onFiles(prepared);
    });
    input.click();
  };

  const handleRootUploadFiles = () => {
    if (!onFileUpload) return;
    spawnInput(false, (files) => onFileUpload(files)); // parent_id –±–µ—Ä—ë—Ç —Ç–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞
  };
  const handleRootUploadFolder = () => {
    if (!onFileUpload) return;
    spawnInput(true, (files) => onFileUpload(files));
  };

  /** ====== —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ ====== */
  const [showCreateFolderDialog, setShowCreateFolderDialog] = useState(false);
  const [newFolderName, setNewFolderName] = useState('');
  const handleCreateRootFolder = async () => {
    const name = newFolderName.trim();
    if (!name) return;
    await onAction('create-subfolder', 'root', { folderName: name }); // –æ–±—Ä–∞–±–æ—Ç–∫–∞ 'root' –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ä–æ–¥–∏—Ç–µ–ª—è
    setNewFolderName('');
    setShowCreateFolderDialog(false);
  };

  /** ====== —Ä–µ–Ω–¥–µ—Ä ====== */
  return (
    <div className="space-y-2">
      <div className="flex gap-2 p-2 border-b">
        <Button variant="outline" size="sm" onClick={handleRootUploadFiles} className="flex items-center gap-2" title="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã">
          <Upload className="h-4 w-4" /> –§–∞–π–ª—ã
        </Button>
        <Button variant="outline" size="sm" onClick={handleRootUploadFolder} className="flex items-center gap-2" title="–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–∞–ø–∫—É c –ø–æ–¥–ø–∞–ø–∫–∞–º–∏">
          <Upload className="h-4 w-4" /> –ü–∞–ø–∫—É
        </Button>
        {/* –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –¥–æ–±–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ */}
        {/* <Button size="sm" onClick={() => setShowCreateFolderDialog(true)}>+ –ü–∞–ø–∫–∞</Button> */}
      </div>

      <div className="space-y-1">
        <div className="font-medium text-sm text-muted-foreground px-2 py-1">–ü–∞–ø–∫–∏</div>
        {sortedRoot.length === 0 ? (
          <div className="text-center py-8 text-muted-foreground">–ù–µ—Ç –ø–∞–ø–æ–∫</div>
        ) : (
          <div className="group">
            {sortedRoot.map((node) => {
              const handleSelect = (id: string) => {
                // –æ–±–Ω–æ–≤–ª—è–µ–º URL (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç)
                if (typeof window !== 'undefined') {
                  const url = new URL(window.location.href);
                  url.searchParams.set('folderId', id);
                  window.history.replaceState({}, '', url.toString());
                }
                onSelect(id);
              };
              return (
                <TreeViewItem
                  key={node.id}
                  node={node}
                  level={0}
                  isExpanded={expandedSet.has(node.id)}
                  onToggle={toggleNode}
                  onSelect={handleSelect}
                  selectedId={selectedId}
                  allNodes={sortedRoot}
                  onAction={handleItemAction}
                  expandedNodes={expandedSet}  // –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                />
              );
            })}
          </div>
        )}
      </div>

      <Dialog open={showCreateFolderDialog} onOpenChange={setShowCreateFolderDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–∞–ø–∫—É</DialogTitle>
            <DialogDescription>–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏ –≤ –∫–æ—Ä–Ω–µ</DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="rootFolderName" className="text-right">–ò–º—è –ø–∞–ø–∫–∏</Label>
              <Input
                id="rootFolderName"
                value={newFolderName}
                onChange={(e) => setNewFolderName(e.target.value)}
                className="col-span-3"
                placeholder="–ò–º—è –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏"
              />
            </div>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setShowCreateFolderDialog(false)}>–û—Ç–º–µ–Ω–∞</Button>
            <Button onClick={handleCreateRootFolder} disabled={!newFolderName.trim()}>–°–æ–∑–¥–∞—Ç—å</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
};
